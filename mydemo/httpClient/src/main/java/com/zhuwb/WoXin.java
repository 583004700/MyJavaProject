package com.zhuwb;

import org.apache.http.HttpHost;
import org.apache.http.client.config.RequestConfig;
import org.apache.http.client.methods.HttpPost;
import org.apache.log4j.Logger;

import java.text.SimpleDateFormat;
import java.util.*;

public class WoXin {
    private static int stopTime = 0;

    private static SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");

    public static Logger LOG = Logger.getLogger(WoXin.class);

    /**
     * 收取别人的金币
     *
     * @return
     * @throws Exception
     */
    public static String takeOtherCoin(String tsinfo, byte[] arrOutput) {
        return msgPortCoin(tsinfo, arrOutput, "2.21.1");
    }

    /**
     * 收取自己的金币
     *
     * @return
     * @throws Exception
     */
    public static void takeMyCoin() {
        while (true) {
            byte[] arrOutput = {0x0A,0x07,0x31,0x34,0x2E,0x31,0x38,0x2E,0x31,0x12,0x13,0x32,0x30,0x31,0x39,0x2D,0x30,0x38,0x2D,0x30,0x37,0x20,0x31,0x35,0x3A,0x30,0x38,0x3A,0x32,0x38,0x1A,(byte)0xC3,(byte)0x80,0x02,0x78,0x73,0x72,0x6D,0x58,0x69,0x32,0x68,0x76,0x53,0x55,0x57,0x34,0x5A,0x6A,0x5A,0x4E,0x71,0x68,0x31,0x67,0x65,0x31,0x75,0x4D,0x68,0x79,0x46,0x36,0x33,0x34,0x75,0x44,0x34,0x34,0x2F,0x4F,0x65,0x69,0x42,0x6A,0x50,0x31,0x31,0x6F,0x45,0x49,0x53,0x65,0x55,0x37,0x33,0x67,0x5A,0x32,0x68,0x34,0x73,0x63,0x64,0x43,0x46,0x31,0x76,0x31,0x78,0x70,0x79,0x72,0x48,0x43,0x35,0x52,0x4B,0x71,0x42,0x6B,0x67,0x4F,0x4C,0x39,0x4E,0x66,0x58,0x53,0x73,0x2F,0x64,0x67,0x46,0x64,0x4E,0x34,0x42,0x75,0x7A,0x78,0x34,0x4E,0x65,0x65,0x55,0x4B,0x36,0x46,0x35,0x67,0x68,0x64,0x6D,0x42,0x56,0x4B,0x57,0x6B,0x41,0x44,0x6D,0x61,0x6A,0x75,0x6E,0x66,0x42,0x54,0x76,0x78,0x39,0x7A,0x59,0x78,0x58,0x7A,0x4E,0x4C,0x4C,0x42,0x43,0x58,0x77,0x6C,0x58,0x41,0x73,0x72,0x71,0x38,0x2F,0x66,0x34,0x72,0x6F,0x62,0x4C,0x72,0x32,0x4C,0x2B,0x67,0x73,0x65,0x72,0x52,0x50,0x39,0x4F,0x4D,0x65,0x64,0x74,0x4C,0x6A,0x79,0x57,0x35,0x49,0x6F,0x61,0x38,0x45,0x31,0x6A,0x48,0x31,0x71,0x44,0x6E,0x79,0x4C,0x35,0x63,0x47,0x79,0x30,0x6C,0x70,0x76,0x49,0x50,0x41,0x31,0x57,0x42,0x45,0x4F,0x74,0x76,0x55,0x44,0x6E,0x51,0x75,0x62,0x36,0x48,0x59,0x46,0x6B,0x66,0x50,0x31,0x31,0x7A,0x48,0x4C,0x6A,0x2B,0x62,0x5A,0x73,0x56,0x43,0x70,0x7A,0x49,0x31,0x69,0x4D,0x64,0x52,0x53,0x63,0x51,0x54,0x68,0x39,0x34,0x4D,0x56,0x49,0x38,0x39,0x72,0x52,0x44,0x4D,0x45,0x42,0x7A,0x53,0x6C,0x4D,0x6C,0x46,0x6E,0x48,0x65,0x53,0x64,0x62,0x67,0x38,0x45,0x71,0x74,0x45,0x4B,0x55,0x67,0x49,0x56,0x46,0x51,0x52,0x68,0x6F,0x43,0x6C,0x4B,0x46,0x56,0x63,0x63,0x31,0x4D,0x2B,0x68,0x72,0x48,0x6B,0x77,0x47,0x74,0x75,0x69,0x39,0x4C,0x48,0x2B,0x42,0x62,0x63,0x39,0x4A,0x55,0x68,0x54,0x54,0x53,0x65,0x22,0x07,0x31,0x7C,0x39,0x35,0x2E,0x30,0x31};
            String body = msgPortCoin("GbpBNCscalrRtaI9l/8JvQ==", arrOutput, "14.18.1");
            LOG.info("收取自己金币" + body);
            try {
                Thread.sleep(60000);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    /**
     * 浇花
     *
     * @return
     */
    public static void waterFlowers() {
        for (int i = 0; i < 6; i++) {
            byte[] arrOutput = {0x0A,0x07,0x31,0x34,0x2E,0x32,0x35,0x2E,0x31,0x12,0x13,0x32,0x30,0x31,0x39,0x2D,0x30,0x38,0x2D,0x30,0x37,0x20,0x31,0x33,0x3A,0x34,0x35,0x3A,0x31,0x33,0x1A,(byte)0xC2,(byte)0x80,0x03,0x6F,0x53,0x54,0x6D,0x56,0x71,0x61,0x42,0x63,0x4C,0x5A,0x71,0x64,0x64,0x78,0x66,0x75,0x68,0x63,0x6D,0x61,0x65,0x32,0x37,0x4A,0x37,0x49,0x5A,0x56,0x4A,0x6C,0x32,0x70,0x75,0x55,0x33,0x4F,0x30,0x4F,0x2F,0x75,0x58,0x36,0x52,0x61,0x63,0x32,0x68,0x49,0x41,0x73,0x51,0x77,0x51,0x76,0x68,0x5A,0x7A,0x78,0x56,0x30,0x45,0x4B,0x56,0x59,0x78,0x4A,0x75,0x55,0x34,0x39,0x68,0x63,0x73,0x6F,0x6E,0x48,0x7A,0x5A,0x72,0x69,0x6A,0x42,0x38,0x6F,0x38,0x5A,0x74,0x67,0x4C,0x68,0x36,0x6C,0x63,0x77,0x6F,0x4A,0x72,0x30,0x64,0x55,0x59,0x47,0x57,0x45,0x41,0x77,0x45,0x36,0x36,0x74,0x37,0x53,0x41,0x65,0x78,0x49,0x31,0x38,0x6A,0x4D,0x67,0x46,0x6F,0x72,0x2F,0x76,0x71,0x46,0x75,0x47,0x59,0x32,0x54,0x61,0x6F,0x64,0x59,0x48,0x74,0x62,0x6A,0x49,0x63,0x68,0x65,0x74,0x2B,0x4C,0x67,0x2B,0x4F,0x50,0x7A,0x6E,0x6F,0x67,0x59,0x7A,0x39,0x64,0x61,0x42,0x43,0x45,0x6E,0x6C,0x4F,0x39,0x34,0x47,0x64,0x6F,0x65,0x4C,0x48,0x48,0x51,0x68,0x64,0x62,0x39,0x63,0x61,0x63,0x71,0x78,0x77,0x75,0x55,0x53,0x71,0x67,0x5A,0x49,0x44,0x69,0x2F,0x54,0x58,0x31,0x30,0x72,0x50,0x33,0x59,0x42,0x58,0x54,0x65,0x41,0x62,0x73,0x38,0x65,0x44,0x58,0x6E,0x6C,0x43,0x75,0x68,0x65,0x59,0x49,0x58,0x5A,0x67,0x56,0x53,0x6C,0x70,0x41,0x41,0x35,0x6D,0x6F,0x37,0x70,0x33,0x77,0x55,0x37,0x38,0x66,0x63,0x32,0x4D,0x56,0x38,0x7A,0x53,0x79,0x77,0x51,0x6C,0x38,0x4A,0x56,0x77,0x4C,0x4B,0x36,0x76,0x50,0x33,0x2B,0x4B,0x36,0x47,0x79,0x36,0x39,0x69,0x2F,0x6F,0x4C,0x48,0x71,0x30,0x54,0x2F,0x54,0x6A,0x48,0x6E,0x62,0x53,0x34,0x38,0x6C,0x75,0x53,0x4B,0x47,0x76,0x42,0x4E,0x59,0x78,0x39,0x61,0x67,0x35,0x38,0x69,0x2B,0x58,0x42,0x73,0x74,0x4A,0x61,0x62,0x79,0x44,0x77,0x4E,0x56,0x67,0x30,0x32,0x47,0x62,0x54,0x4B,0x6C,0x4D,0x68,0x51,0x6A,0x4D,0x54,0x6B,0x6E,0x51,0x74,0x56,0x68,0x7A,0x2B,0x58,0x4D,0x56,0x63,0x53,0x72,0x36,0x39,0x56,0x4F,0x6C,0x49,0x2F,0x73,0x49,0x6F,0x46,0x77,0x65,0x44,0x36,0x46,0x6E,0x59,0x57,0x47,0x4F,0x39,0x36,0x35,0x44,0x39,0x44,0x46,0x6A,0x67,0x74,0x47,0x53,0x63,0x31,0x76,0x63,0x22,0x07,0x31,0x7C,0x39,0x35,0x2E,0x30,0x31};
            String body = msgPortCoin("EAhwacoWeZIKdNxMNx32Kw==", arrOutput, "14.25.1");
            LOG.info("浇花" + body);
        }
    }

    /**
     * 和我信接口入口
     *
     * @param tsinfo
     * @param arrOutput
     * @param interfaceCode
     * @return
     * @throws Exception
     */
    private static String msgPortCoin(String tsinfo, byte[] arrOutput, String interfaceCode) {
        HttpHost proxy = new HttpHost("localhost", 8888);
        RequestConfig config = RequestConfig.custom().setProxy(proxy).setConnectTimeout(10000).setSocketTimeout(15000).build();
        HttpPost httpPost = new HttpPost("https://woxin2.jx139.com/interface/MsgPort");
        //String cookie = "UM_distinctid=164c76fd7b628-055448c5c1963f8-58404620-3d10d-164c76fd7b76ae; gr_user_id=0b9f364a-28b1-47f3-8c13-e9068d05139b";
        MyHttpClient myHttpClient = new MyHttpClient(httpPost);
        myHttpClient.setRequestHead("Host", "woxin2.jx139.com")
                .setRequestHead("Content-Type", "application/json")
                .setRequestHead("hwinfo", "KqtAzydTN20LOVEa0mrVsfoHSCzmjWAQA5b7EHijIldQkm4H0CYYDexBvnW5VzwY/QAVyBDuW4htHCbPru63tZAJr1Eka/aU")
                .setRequestHead("tsinfo", tsinfo).setRequestHead("interfaceCode", interfaceCode);
        String body = null;
        try {
            body = myHttpClient.sendHttpPost(null, arrOutput);
        } catch (Exception e) {
            LOG.error("接口调用异常interfaceCode" + interfaceCode + "tsinfo" + tsinfo, e);
        }
        return body;
    }

    public static void takeFriendsCoins() {
        List<Map<String, byte[]>> list = new ArrayList<Map<String, byte[]>>();

        Map<String, byte[]> fyj = new HashMap<String, byte[]>();
        byte[] fyjBytes = {0x0A, 0x06, 0x32, 0x2E, 0x32, 0x31, 0x2E, 0x31, 0x12, 0x13, 0x32, 0x30, 0x31, 0x39, 0x2D, 0x30, 0x38, 0x2D, 0x30, 0x37, 0x20, 0x31, 0x31, 0x3A, 0x31, 0x33, 0x3A, 0x35, 0x30, 0x1A, (byte) 0xC2, (byte) 0xAC, 0x01, 0x57, 0x52, 0x71, 0x6F, 0x53, 0x70, 0x52, 0x57, 0x4E, 0x52, 0x4B, 0x76, 0x4A, 0x55, 0x56, 0x79, 0x79, 0x30, 0x39, 0x68, 0x71, 0x58, 0x79, 0x47, 0x6D, 0x66, 0x64, 0x65, 0x6D, 0x50, 0x58, 0x52, 0x35, 0x35, 0x72, 0x39, 0x52, 0x36, 0x31, 0x55, 0x54, 0x45, 0x75, 0x6E, 0x6F, 0x79, 0x72, 0x59, 0x42, 0x4D, 0x51, 0x53, 0x42, 0x52, 0x6D, 0x6F, 0x54, 0x76, 0x52, 0x73, 0x56, 0x5A, 0x64, 0x61, 0x4C, 0x62, 0x7A, 0x58, 0x42, 0x41, 0x37, 0x35, 0x63, 0x61, 0x53, 0x72, 0x5A, 0x62, 0x57, 0x67, 0x6F, 0x4D, 0x73, 0x4B, 0x4A, 0x6B, 0x61, 0x4F, 0x78, 0x65, 0x56, 0x33, 0x32, 0x44, 0x31, 0x30, 0x35, 0x7A, 0x36, 0x6F, 0x54, 0x41, 0x56, 0x35, 0x63, 0x52, 0x58, 0x49, 0x39, 0x4A, 0x58, 0x49, 0x49, 0x4C, 0x38, 0x4D, 0x6B, 0x68, 0x4F, 0x4E, 0x42, 0x31, 0x75, 0x6E, 0x45, 0x71, 0x2B, 0x6D, 0x73, 0x47, 0x34, 0x69, 0x30, 0x73, 0x42, 0x66, 0x68, 0x69, 0x39, 0x2F, 0x56, 0x30, 0x39, 0x36, 0x50, 0x72, 0x37, 0x34, 0x71, 0x35, 0x7A, 0x50, 0x61, 0x52, 0x4C, 0x31, 0x7A, 0x74, 0x7A, 0x75, 0x4B, 0x77, 0x6A, 0x65, 0x73, 0x4E, 0x4D, 0x4C, 0x49, 0x4D, 0x63, 0x3D, 0x22, 0x07, 0x31, 0x7C, 0x39, 0x35, 0x2E, 0x30, 0x31};
        fyj.put("kvJ9FyK+BjddKxGFPHlSgA==", fyjBytes);
        list.add(fyj);

        Map<String, byte[]> ay = new HashMap<String, byte[]>();
        byte[] ayBytes = {0x0A,0x06,0x32,0x2E,0x32,0x31,0x2E,0x31,0x12,0x13,0x32,0x30,0x31,0x39,0x2D,0x30,0x38,0x2D,0x30,0x37,0x20,0x31,0x33,0x3A,0x35,0x36,0x3A,0x35,0x36,0x1A,(byte)0xC2,(byte)0xAC,0x01,0x57,0x52,0x71,0x6F,0x53,0x70,0x52,0x57,0x4E,0x52,0x4B,0x76,0x4A,0x55,0x56,0x79,0x79,0x30,0x39,0x68,0x71,0x58,0x79,0x47,0x6D,0x66,0x64,0x65,0x6D,0x50,0x58,0x52,0x35,0x35,0x72,0x39,0x52,0x36,0x31,0x55,0x54,0x45,0x75,0x6E,0x6F,0x79,0x72,0x59,0x42,0x4D,0x51,0x53,0x42,0x52,0x6D,0x6F,0x54,0x76,0x52,0x73,0x56,0x5A,0x64,0x61,0x4C,0x62,0x7A,0x58,0x42,0x41,0x37,0x35,0x63,0x61,0x53,0x72,0x5A,0x62,0x57,0x67,0x6F,0x4D,0x73,0x4B,0x4A,0x6B,0x61,0x4F,0x78,0x65,0x56,0x33,0x32,0x44,0x31,0x30,0x35,0x7A,0x36,0x6F,0x54,0x41,0x56,0x35,0x63,0x52,0x58,0x49,0x39,0x4A,0x58,0x49,0x49,0x4C,0x38,0x4D,0x6B,0x6A,0x39,0x42,0x45,0x35,0x71,0x4C,0x45,0x6A,0x49,0x32,0x4B,0x74,0x2B,0x52,0x45,0x39,0x74,0x49,0x69,0x41,0x73,0x53,0x59,0x53,0x64,0x31,0x77,0x37,0x4B,0x33,0x55,0x37,0x41,0x53,0x51,0x43,0x4D,0x6F,0x30,0x2F,0x6D,0x67,0x6C,0x6C,0x42,0x33,0x77,0x4F,0x62,0x78,0x48,0x2B,0x41,0x3D,0x22,0x07,0x31,0x7C,0x39,0x35,0x2E,0x30,0x31};
        ay.put("iqDAsvfhH/WxZ5/H14/zYA==", ayBytes);
        list.add(ay);

        Map<String, byte[]> gxz = new HashMap<String, byte[]>();
        byte[] gxzBytes = {0x0A,0x06,0x32,0x2E,0x32,0x31,0x2E,0x31,0x12,0x13,0x32,0x30,0x31,0x39,0x2D,0x30,0x38,0x2D,0x30,0x37,0x20,0x31,0x34,0x3A,0x30,0x33,0x3A,0x30,0x34,0x1A,(byte)0xC2,(byte)0xAC,0x01,0x57,0x52,0x71,0x6F,0x53,0x70,0x52,0x57,0x4E,0x52,0x4B,0x76,0x4A,0x55,0x56,0x79,0x79,0x30,0x39,0x68,0x71,0x58,0x79,0x47,0x6D,0x66,0x64,0x65,0x6D,0x50,0x58,0x52,0x35,0x35,0x72,0x39,0x52,0x36,0x31,0x55,0x54,0x45,0x75,0x6E,0x6F,0x79,0x72,0x59,0x42,0x4D,0x51,0x53,0x42,0x52,0x6D,0x6F,0x54,0x76,0x52,0x73,0x56,0x5A,0x64,0x61,0x4C,0x62,0x7A,0x58,0x42,0x41,0x37,0x35,0x63,0x61,0x53,0x72,0x5A,0x62,0x57,0x67,0x6F,0x4D,0x73,0x4B,0x4A,0x6B,0x61,0x4F,0x78,0x65,0x56,0x33,0x32,0x44,0x31,0x30,0x35,0x7A,0x36,0x6F,0x54,0x41,0x56,0x35,0x63,0x52,0x58,0x49,0x39,0x4A,0x58,0x49,0x49,0x4C,0x38,0x4D,0x6B,0x6A,0x39,0x42,0x45,0x35,0x71,0x4C,0x45,0x6A,0x49,0x32,0x6A,0x2F,0x44,0x55,0x47,0x56,0x67,0x4D,0x65,0x66,0x46,0x6C,0x6F,0x6D,0x79,0x6B,0x2B,0x68,0x4C,0x44,0x59,0x77,0x62,0x4C,0x6B,0x33,0x66,0x6F,0x64,0x6F,0x71,0x30,0x76,0x53,0x72,0x67,0x4E,0x36,0x36,0x41,0x4C,0x42,0x4D,0x3D,0x22,0x07,0x31,0x7C,0x39,0x35,0x2E,0x30,0x31};
        gxz.put("edYjK5lIeA7saLNCOSA88Q==", gxzBytes);
        list.add(gxz);

        Map<String, byte[]> lzm = new HashMap<String, byte[]>();
        byte[] lzmBytes = {0x0A,0x06,0x32,0x2E,0x32,0x31,0x2E,0x31,0x12,0x13,0x32,0x30,0x31,0x39,0x2D,0x30,0x38,0x2D,0x30,0x37,0x20,0x31,0x34,0x3A,0x31,0x30,0x3A,0x35,0x36,0x1A,(byte)0xC2,(byte)0xAC,0x01,0x57,0x52,0x71,0x6F,0x53,0x70,0x52,0x57,0x4E,0x52,0x4B,0x76,0x4A,0x55,0x56,0x79,0x79,0x30,0x39,0x68,0x71,0x58,0x79,0x47,0x6D,0x66,0x64,0x65,0x6D,0x50,0x58,0x52,0x35,0x35,0x72,0x39,0x52,0x36,0x31,0x55,0x54,0x45,0x75,0x6E,0x6F,0x79,0x72,0x59,0x42,0x4D,0x51,0x53,0x42,0x52,0x6D,0x6F,0x54,0x76,0x52,0x73,0x56,0x5A,0x64,0x61,0x4C,0x62,0x7A,0x58,0x42,0x41,0x37,0x35,0x63,0x61,0x53,0x72,0x5A,0x62,0x57,0x67,0x6F,0x4D,0x73,0x4B,0x4A,0x6B,0x61,0x4F,0x78,0x65,0x56,0x33,0x32,0x44,0x31,0x30,0x35,0x7A,0x36,0x6F,0x54,0x41,0x56,0x35,0x63,0x52,0x58,0x49,0x39,0x4A,0x58,0x49,0x49,0x4C,0x38,0x4D,0x6B,0x67,0x46,0x65,0x54,0x75,0x63,0x75,0x49,0x67,0x54,0x51,0x7A,0x75,0x45,0x43,0x57,0x46,0x67,0x6E,0x79,0x79,0x4D,0x2B,0x36,0x75,0x56,0x49,0x57,0x4F,0x75,0x63,0x61,0x63,0x56,0x4C,0x68,0x73,0x73,0x44,0x5A,0x51,0x48,0x6E,0x44,0x4D,0x62,0x54,0x70,0x62,0x43,0x79,0x6C,0x51,0x38,0x3D,0x22,0x07,0x31,0x7C,0x39,0x35,0x2E,0x30,0x31};
        lzm.put("ZzckbLYjh6jD4oNczLzCJw==", lzmBytes);
        list.add(lzm);

        Map<String, byte[]> hmx = new HashMap<String, byte[]>();
        byte[] hmxBytes = {0x0A,0x06,0x32,0x2E,0x32,0x31,0x2E,0x31,0x12,0x13,0x32,0x30,0x31,0x39,0x2D,0x30,0x38,0x2D,0x30,0x37,0x20,0x31,0x34,0x3A,0x31,0x31,0x3A,0x30,0x30,0x1A,(byte)0xC2,(byte)0xAC,0x01,0x57,0x52,0x71,0x6F,0x53,0x70,0x52,0x57,0x4E,0x52,0x4B,0x76,0x4A,0x55,0x56,0x79,0x79,0x30,0x39,0x68,0x71,0x58,0x79,0x47,0x6D,0x66,0x64,0x65,0x6D,0x50,0x58,0x52,0x35,0x35,0x72,0x39,0x52,0x36,0x31,0x55,0x54,0x45,0x75,0x6E,0x6F,0x79,0x72,0x59,0x42,0x4D,0x51,0x53,0x42,0x52,0x6D,0x6F,0x54,0x76,0x52,0x73,0x56,0x5A,0x64,0x61,0x4C,0x62,0x7A,0x58,0x42,0x41,0x37,0x35,0x63,0x61,0x53,0x72,0x5A,0x62,0x57,0x67,0x6F,0x4D,0x73,0x4B,0x4A,0x6B,0x61,0x4F,0x78,0x65,0x56,0x33,0x32,0x44,0x31,0x30,0x35,0x7A,0x36,0x6F,0x54,0x41,0x56,0x35,0x63,0x52,0x58,0x49,0x39,0x4A,0x58,0x49,0x49,0x4C,0x38,0x4D,0x6B,0x67,0x46,0x65,0x54,0x75,0x63,0x75,0x49,0x67,0x54,0x51,0x61,0x72,0x67,0x6B,0x70,0x57,0x61,0x32,0x6C,0x6D,0x31,0x52,0x4B,0x67,0x2F,0x73,0x51,0x4E,0x6A,0x7A,0x6F,0x69,0x50,0x58,0x77,0x71,0x46,0x6C,0x41,0x38,0x69,0x7A,0x2F,0x73,0x64,0x6C,0x47,0x44,0x75,0x71,0x78,0x69,0x67,0x3D,0x22,0x07,0x31,0x7C,0x39,0x35,0x2E,0x30,0x31};
        hmx.put("ZzckbLYjh6hCmYJLmNCV3A==", hmxBytes);
        list.add(hmx);

        Map<String, byte[]> pjm = new HashMap<String, byte[]>();
        byte[] pjmBytes = {0x0A,0x06,0x32,0x2E,0x32,0x31,0x2E,0x31,0x12,0x13,0x32,0x30,0x31,0x39,0x2D,0x30,0x38,0x2D,0x30,0x37,0x20,0x31,0x34,0x3A,0x32,0x30,0x3A,0x31,0x34,0x1A,(byte)0xC2,(byte)0xAC,0x01,0x57,0x52,0x71,0x6F,0x53,0x70,0x52,0x57,0x4E,0x52,0x4B,0x76,0x4A,0x55,0x56,0x79,0x79,0x30,0x39,0x68,0x71,0x58,0x79,0x47,0x6D,0x66,0x64,0x65,0x6D,0x50,0x58,0x52,0x35,0x35,0x72,0x39,0x52,0x36,0x31,0x55,0x54,0x45,0x75,0x6E,0x6F,0x79,0x72,0x59,0x42,0x4D,0x51,0x53,0x42,0x52,0x6D,0x6F,0x54,0x76,0x52,0x73,0x56,0x5A,0x64,0x61,0x4C,0x62,0x7A,0x58,0x42,0x41,0x37,0x35,0x63,0x61,0x53,0x72,0x5A,0x62,0x57,0x67,0x6F,0x4D,0x73,0x4B,0x4A,0x6B,0x61,0x4F,0x78,0x65,0x56,0x33,0x32,0x44,0x31,0x30,0x35,0x7A,0x36,0x6F,0x54,0x41,0x56,0x35,0x63,0x52,0x58,0x49,0x39,0x4A,0x58,0x49,0x49,0x4C,0x38,0x4D,0x6B,0x67,0x46,0x65,0x54,0x75,0x63,0x75,0x49,0x67,0x54,0x51,0x47,0x4D,0x47,0x4F,0x76,0x45,0x50,0x50,0x6A,0x49,0x39,0x77,0x58,0x65,0x55,0x57,0x61,0x33,0x7A,0x4E,0x31,0x59,0x77,0x79,0x44,0x38,0x36,0x64,0x73,0x4F,0x5A,0x57,0x4D,0x2F,0x51,0x53,0x73,0x66,0x4D,0x67,0x4A,0x5A,0x73,0x3D,0x22,0x07,0x31,0x7C,0x39,0x35,0x2E,0x30,0x31};
        pjm.put("QSu5hAkwtP/jZ0oi+dhuTg==", pjmBytes);
        list.add(pjm);

        Map<String, byte[]> lwj = new HashMap<String, byte[]>();
        byte[] lwjBytes = {0x0A,0x06,0x32,0x2E,0x32,0x31,0x2E,0x31,0x12,0x13,0x32,0x30,0x31,0x39,0x2D,0x30,0x38,0x2D,0x30,0x37,0x20,0x31,0x34,0x3A,0x32,0x33,0x3A,0x35,0x33,0x1A,(byte)0xC2,(byte)0xAC,0x01,0x57,0x52,0x71,0x6F,0x53,0x70,0x52,0x57,0x4E,0x52,0x4B,0x76,0x4A,0x55,0x56,0x79,0x79,0x30,0x39,0x68,0x71,0x58,0x79,0x47,0x6D,0x66,0x64,0x65,0x6D,0x50,0x58,0x52,0x35,0x35,0x72,0x39,0x52,0x36,0x31,0x55,0x54,0x45,0x75,0x6E,0x6F,0x79,0x72,0x59,0x42,0x4D,0x51,0x53,0x42,0x52,0x6D,0x6F,0x54,0x76,0x52,0x73,0x56,0x5A,0x64,0x61,0x4C,0x62,0x7A,0x58,0x42,0x41,0x37,0x35,0x63,0x61,0x53,0x72,0x5A,0x62,0x57,0x67,0x6F,0x4D,0x73,0x4B,0x4A,0x6B,0x61,0x4F,0x78,0x65,0x56,0x33,0x32,0x44,0x31,0x30,0x35,0x7A,0x36,0x6F,0x54,0x41,0x56,0x35,0x63,0x52,0x58,0x49,0x39,0x4A,0x58,0x49,0x49,0x4C,0x38,0x4D,0x6B,0x6E,0x4C,0x75,0x36,0x78,0x57,0x55,0x67,0x52,0x67,0x70,0x36,0x64,0x72,0x54,0x59,0x34,0x51,0x53,0x47,0x76,0x2B,0x72,0x4B,0x56,0x38,0x56,0x54,0x4B,0x7A,0x32,0x75,0x67,0x6D,0x5A,0x53,0x73,0x58,0x63,0x39,0x68,0x47,0x6C,0x57,0x4F,0x58,0x50,0x54,0x65,0x2B,0x42,0x2F,0x2B,0x38,0x3D,0x22,0x07,0x31,0x7C,0x39,0x35,0x2E,0x30,0x31};
        lwj.put("6cws5cARu2FShQVZQvZGWQ==", lwjBytes);
        list.add(lwj);

        Map<String, byte[]> h2 = new HashMap<String, byte[]>();
        byte[] h2Bytes = {0x0A,0x06,0x32,0x2E,0x32,0x31,0x2E,0x31,0x12,0x13,0x32,0x30,0x31,0x39,0x2D,0x30,0x38,0x2D,0x30,0x37,0x20,0x31,0x34,0x3A,0x32,0x37,0x3A,0x35,0x31,0x1A,(byte)0xC2,(byte)0xAC,0x01,0x57,0x52,0x71,0x6F,0x53,0x70,0x52,0x57,0x4E,0x52,0x4B,0x76,0x4A,0x55,0x56,0x79,0x79,0x30,0x39,0x68,0x71,0x58,0x79,0x47,0x6D,0x66,0x64,0x65,0x6D,0x50,0x58,0x52,0x35,0x35,0x72,0x39,0x52,0x36,0x31,0x55,0x54,0x45,0x75,0x6E,0x6F,0x79,0x72,0x59,0x42,0x4D,0x51,0x53,0x42,0x52,0x6D,0x6F,0x54,0x76,0x52,0x73,0x56,0x5A,0x64,0x61,0x4C,0x62,0x7A,0x58,0x42,0x41,0x37,0x35,0x63,0x61,0x53,0x72,0x5A,0x62,0x57,0x67,0x6F,0x4D,0x73,0x4B,0x4A,0x6B,0x61,0x4F,0x78,0x65,0x56,0x33,0x32,0x44,0x31,0x30,0x35,0x7A,0x36,0x6F,0x54,0x41,0x56,0x35,0x63,0x52,0x58,0x49,0x39,0x4A,0x58,0x49,0x49,0x4C,0x38,0x4D,0x6B,0x6E,0x4C,0x75,0x36,0x78,0x57,0x55,0x67,0x52,0x67,0x70,0x47,0x64,0x47,0x41,0x4F,0x54,0x79,0x52,0x6A,0x64,0x59,0x4B,0x6A,0x43,0x50,0x30,0x46,0x4F,0x31,0x50,0x4C,0x72,0x73,0x36,0x4C,0x72,0x50,0x2F,0x34,0x54,0x2F,0x6B,0x57,0x68,0x42,0x44,0x55,0x50,0x6A,0x66,0x66,0x63,0x73,0x3D,0x22,0x07,0x31,0x7C,0x39,0x35,0x2E,0x30,0x31};
        h2.put("8gaaPT5OZuZKXX8X1uVIcA==", h2Bytes);
        list.add(h2);

        while (true) {
            for (int i = 0; i < list.size(); i++) {
                Map<String, byte[]> m = list.get(i);
                Set<Map.Entry<String, byte[]>> entrySet = m.entrySet();
                Iterator<Map.Entry<String, byte[]>> iterator = entrySet.iterator();
                Map.Entry<String, byte[]> mapEntry = iterator.next();
                try {
                    String reulst = takeOtherCoin(mapEntry.getKey(), mapEntry.getValue());
                    //System.out.println(mapEntry.getKey()+"---"+reulst);
                    LOG.info("收取好友金币" + mapEntry.getKey() + "---" + reulst);
                    if (reulst.contains("不能再捡")) {
                        stopTime = Integer.parseInt(sdf.format(new Date()));
                        return;
                    }
                    Thread.sleep(2000);
                } catch (Exception e) {
                    LOG.error(e);
                }
            }
        }
    }

    public static String sp(String src) {
        src = "0A0731342E31382E311213323031392D" +
                "30382D30372031353A30383A32381AC3" +
                "80027873726D5869326876535557345A" +
                "6A5A4E716831676531754D6879463633" +
                "34754434342F4F6569426A5031316F45" +
                "495365553733675A3268347363644346" +
                "31763178707972484335524B71426B67" +
                "4F4C394E665853732F646746644E3442" +
                "757A78344E6565554B3646356768646D" +
                "42564B576B41446D616A756E66425476" +
                "78397A5978587A4E4C4C424358776C58" +
                "41737271382F6634726F624C72324C2B" +
                "677365725250394F4D6564744C6A7957" +
                "35496F613845316A483171446E794C35" +
                "634779306C7076495041315742454F74" +
                "7655446E517562364859466B66503131" +
                "7A484C6A2B625A735643707A4931694D" +
                "6452536351546839344D564938397252" +
                "444D45427A536C4D6C466E4865536462" +
                "6738457174454B55674956465152686F" +
                "436C4B46566363314D2B6872486B7747" +
                "747569394C482B426263394A55685454" +
                "53652207317C39352E3031";
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < src.length(); i += 2) {
            sb.append("0x" + src.substring(i, i + 2) + ",");
        }
        System.out.println(sb.toString());
        return sb.toString();
    }

    public static void main(String[] args) throws Exception {
        //sp("");
        if ("1".equals(System.getProperty("i"))) {
            Thread t2 = new Thread(() -> takeMyCoin());
            t2.start();
        }

        waterFlowers();
        Thread t1 = new Thread(() -> takeFriendsCoins());
        t1.start();

        while (true) {
            if (Integer.valueOf(sdf.format(new Date())) > stopTime) {
                LOG.info("又是新的一天了");
                waterFlowers();

                if (t1.getState() == Thread.State.TERMINATED) {
                    t1 = new Thread(() -> takeFriendsCoins());
                    t1.start();
                }
            }

            Thread.sleep(1000 * 3600);
        }
    }

}
