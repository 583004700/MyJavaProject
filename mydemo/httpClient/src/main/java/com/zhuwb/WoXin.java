package com.zhuwb;

import org.apache.http.HttpHost;
import org.apache.http.client.config.RequestConfig;
import org.apache.http.client.methods.HttpPost;
import org.apache.log4j.Logger;

import java.text.SimpleDateFormat;
import java.util.*;

public class WoXin {
    private static int stopTime = 0;

    private static SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");

    public static Logger LOG = Logger.getLogger(WoXin.class);
    /**
     * 收取别人的金币
     * @return
     * @throws Exception
     */
    public static String takeOtherCoin(String tsinfo,byte[] arrOutput) {
        return msgPortCoin(tsinfo,arrOutput,"2.21.1");
    }

    /**
     * 收取自己的金币
     * @return
     * @throws Exception
     */
    public static void takeMyCoin() {
        while(true) {
            byte[] arrOutput = {0x0A, 0x07, 0x31, 0x34, 0x2E, 0x31, 0x38, 0x2E, 0x31, 0x12, 0x13, 0x32, 0x30, 0x31, 0x38, 0x2D, 0x31, 0x30, 0x2D, 0x30, 0x34, 0x20, 0x31, 0x35, 0x3A, 0x33, 0x37, 0x3A, 0x32, 0x36, 0x1A, (byte) 0xC2, (byte) 0x8C, 0x02, 0x56, 0x65, 0x54, 0x51, 0x72, 0x73, 0x59, 0x43, 0x42, 0x70, 0x73, 0x57, 0x34, 0x5A, 0x6A, 0x5A, 0x4E, 0x71, 0x68, 0x31, 0x67, 0x65, 0x31, 0x75, 0x4D, 0x68, 0x79, 0x46, 0x36, 0x33, 0x34, 0x75, 0x44, 0x34, 0x34, 0x2F, 0x4F, 0x65, 0x69, 0x42, 0x6A, 0x50, 0x31, 0x31, 0x6F, 0x45, 0x49, 0x53, 0x65, 0x55, 0x37, 0x33, 0x67, 0x5A, 0x32, 0x68, 0x34, 0x73, 0x63, 0x64, 0x43, 0x46, 0x31, 0x76, 0x31, 0x78, 0x70, 0x79, 0x72, 0x48, 0x43, 0x35, 0x52, 0x4B, 0x6F, 0x69, 0x39, 0x47, 0x4D, 0x2B, 0x36, 0x2F, 0x4F, 0x5A, 0x66, 0x50, 0x35, 0x4A, 0x46, 0x67, 0x30, 0x41, 0x69, 0x2F, 0x55, 0x4F, 0x2F, 0x75, 0x69, 0x68, 0x39, 0x67, 0x62, 0x72, 0x31, 0x52, 0x4D, 0x50, 0x62, 0x38, 0x42, 0x32, 0x4E, 0x70, 0x57, 0x4B, 0x42, 0x59, 0x5A, 0x4F, 0x45, 0x6C, 0x2B, 0x7A, 0x6F, 0x72, 0x33, 0x49, 0x52, 0x6A, 0x61, 0x2B, 0x4E, 0x62, 0x2F, 0x4D, 0x47, 0x6E, 0x43, 0x47, 0x44, 0x6F, 0x70, 0x50, 0x4F, 0x2F, 0x47, 0x2B, 0x67, 0x7A, 0x6F, 0x32, 0x38, 0x79, 0x58, 0x63, 0x62, 0x75, 0x58, 0x51, 0x63, 0x70, 0x68, 0x50, 0x4D, 0x52, 0x2F, 0x6A, 0x6A, 0x33, 0x45, 0x4E, 0x38, 0x49, 0x75, 0x38, 0x6A, 0x31, 0x2B, 0x66, 0x62, 0x4A, 0x31, 0x46, 0x61, 0x50, 0x4F, 0x6B, 0x44, 0x42, 0x4B, 0x6E, 0x57, 0x4A, 0x4A, 0x53, 0x5A, 0x56, 0x47, 0x67, 0x78, 0x51, 0x49, 0x50, 0x52, 0x70, 0x35, 0x55, 0x4F, 0x57, 0x33, 0x47, 0x76, 0x45, 0x4F, 0x59, 0x69, 0x6E, 0x56, 0x36, 0x57, 0x72, 0x6B, 0x51, 0x6F, 0x63, 0x30, 0x43, 0x39, 0x44, 0x4A, 0x41, 0x7A, 0x4E, 0x4F, 0x4F, 0x79, 0x69, 0x32, 0x2F, 0x65, 0x38, 0x4C, 0x33, 0x30, 0x48, 0x42, 0x4B, 0x72, 0x69, 0x6A, 0x49, 0x47, 0x50, 0x4F, 0x2B, 0x61, 0x56, 0x71, 0x38, 0x51, 0x4A, 0x39, 0x50, 0x59, 0x54, 0x49, 0x3D, 0x22, 0x04, 0x31, 0x7C, 0x38, 0x35};
            String body = msgPortCoin("3wMl9Dxz6v7BP9rdnjewAg==", arrOutput, "14.18.1");
            LOG.info("收取自己金币"+body);
            try {
                Thread.sleep(60000);
            }catch (Exception e){
                e.printStackTrace();
            }
        }
    }

    /**
     * 浇花
     * @return
     */
    public static void waterFlowers() {
        for(int i = 0;i < 6;i++) {
            byte[] arrOutput = {0x0A, 0x07, 0x31, 0x34, 0x2E, 0x32, 0x35, 0x2E, 0x31, 0x12, 0x13, 0x32, 0x30, 0x31, 0x38, 0x2D, 0x31, 0x30, 0x2D, 0x30, 0x34, 0x20, 0x31, 0x33, 0x3A, 0x32, 0x39, 0x3A, 0x35, 0x36, 0x1A, (byte) 0xC3, (byte) 0x8C, 0x02, 0x33, 0x77, 0x35, 0x50, 0x4C, 0x48, 0x4C, 0x78, 0x4F, 0x68, 0x5A, 0x71, 0x64, 0x64, 0x78, 0x66, 0x75, 0x68, 0x63, 0x6D, 0x61, 0x65, 0x32, 0x37, 0x4A, 0x37, 0x49, 0x5A, 0x56, 0x4A, 0x6C, 0x32, 0x70, 0x75, 0x55, 0x33, 0x4F, 0x30, 0x4F, 0x2F, 0x75, 0x58, 0x36, 0x52, 0x61, 0x63, 0x32, 0x68, 0x49, 0x41, 0x73, 0x51, 0x77, 0x51, 0x76, 0x68, 0x5A, 0x7A, 0x78, 0x56, 0x30, 0x45, 0x4B, 0x56, 0x59, 0x78, 0x4A, 0x75, 0x55, 0x34, 0x39, 0x68, 0x63, 0x73, 0x6F, 0x6E, 0x48, 0x7A, 0x5A, 0x72, 0x69, 0x6A, 0x42, 0x38, 0x6F, 0x38, 0x5A, 0x74, 0x67, 0x4C, 0x68, 0x36, 0x6C, 0x63, 0x77, 0x6F, 0x4A, 0x72, 0x30, 0x64, 0x55, 0x59, 0x47, 0x57, 0x45, 0x41, 0x77, 0x45, 0x36, 0x36, 0x74, 0x37, 0x53, 0x41, 0x65, 0x78, 0x49, 0x31, 0x38, 0x6A, 0x4D, 0x67, 0x46, 0x6F, 0x72, 0x2F, 0x76, 0x71, 0x46, 0x75, 0x47, 0x59, 0x32, 0x54, 0x61, 0x6F, 0x64, 0x59, 0x48, 0x74, 0x62, 0x6A, 0x49, 0x63, 0x68, 0x65, 0x74, 0x2B, 0x4C, 0x67, 0x2B, 0x4F, 0x50, 0x7A, 0x6E, 0x6F, 0x67, 0x59, 0x7A, 0x39, 0x64, 0x61, 0x42, 0x43, 0x45, 0x6E, 0x6C, 0x4F, 0x39, 0x34, 0x47, 0x64, 0x6F, 0x65, 0x4C, 0x48, 0x48, 0x51, 0x68, 0x64, 0x62, 0x39, 0x63, 0x61, 0x63, 0x71, 0x78, 0x77, 0x75, 0x55, 0x53, 0x71, 0x49, 0x76, 0x52, 0x6A, 0x50, 0x75, 0x76, 0x7A, 0x6D, 0x58, 0x7A, 0x2B, 0x53, 0x52, 0x59, 0x4E, 0x41, 0x49, 0x76, 0x31, 0x44, 0x76, 0x37, 0x6F, 0x6F, 0x66, 0x59, 0x47, 0x36, 0x39, 0x55, 0x54, 0x44, 0x32, 0x2F, 0x41, 0x64, 0x6A, 0x61, 0x56, 0x69, 0x67, 0x57, 0x47, 0x54, 0x68, 0x4A, 0x66, 0x73, 0x36, 0x4B, 0x39, 0x79, 0x45, 0x59, 0x32, 0x76, 0x6A, 0x57, 0x2F, 0x7A, 0x42, 0x70, 0x77, 0x68, 0x67, 0x36, 0x4B, 0x54, 0x7A, 0x76, 0x78, 0x76, 0x6F, 0x4D, 0x67, 0x53, 0x69, 0x62, 0x65, 0x4A, 0x53, 0x35, 0x31, 0x4C, 0x39, 0x68, 0x4B, 0x70, 0x65, 0x4A, 0x45, 0x6A, 0x68, 0x46, 0x35, 0x57, 0x37, 0x6E, 0x47, 0x6E, 0x75, 0x62, 0x39, 0x47, 0x54, 0x6D, 0x75, 0x4C, 0x48, 0x58, 0x79, 0x4D, 0x37, 0x45, 0x32, 0x6B, 0x59, 0x34, 0x62, 0x69, 0x42, 0x37, 0x30, 0x4C, 0x52, 0x35, 0x42, 0x4D, 0x57, 0x4F, 0x43, 0x30, 0x5A, 0x4A, 0x7A, 0x57, 0x39, 0x77, 0x3D, 0x22, 0x04, 0x31, 0x7C, 0x38, 0x35};
            String body = msgPortCoin("wwm3bb+xCkhN+NDfx4qKgQ==", arrOutput, "14.25.1");
            LOG.info("浇花"+body);
        }
    }

    /**
     * 和我信接口入口
     * @param tsinfo
     * @param arrOutput
     * @param interfaceCode
     * @return
     * @throws Exception
     */
    private static String msgPortCoin(String tsinfo,byte[] arrOutput,String interfaceCode) {
        HttpHost proxy = new HttpHost("localhost",8888);
        RequestConfig config = RequestConfig.custom().setProxy(proxy).setConnectTimeout(10000).setSocketTimeout(15000).build();
        HttpPost httpPost = new HttpPost("https://woxin2.jx139.com/interface/MsgPort");
        String cookie = "UM_distinctid=164c76fd7b628-055448c5c1963f8-58404620-3d10d-164c76fd7b76ae; gr_user_id=0b9f364a-28b1-47f3-8c13-e9068d05139b";
        MyHttpClient myHttpClient = new MyHttpClient(httpPost);
        myHttpClient.setRequestHead("Host","woxin2.jx139.com")
                .setRequestHead("RMInfo","6V0f/7VVtFChZniXUGE+n99Z3N8LNdW1ump7QYPdUz2Fi7egZ/lpnpkg9EJttI11bCkSeP6U0df2wbWjTTaSRSywndd9eAbw7I6j4lPeR3NqniwScDOQX8kT8BTqtlK84maF6bT6jZnn4m1Be6fvxjnCM3+LBVUvsCkvihTwCaU=").setRequestHead("Cookie",cookie).setRequestHead("Content-Type","application/json")
                .setRequestHead("cellphone","15170669774").setRequestHead("User-Agent","WoxinRelease/85 CFNetwork/974.2.1 Darwin/18.0.0")
                .setRequestHead("IMEI","430B4D20-9CAD-4441-A330-AE83A3D3E23A")
                .setRequestHead("NETWORK","wifi").setRequestHead("hwinfo","KqtAzydTN20LOVEa0mrVsfoHSCzmjWAQA5b7EHijIldQkm4H0CYYDexBvnW5VzwY/QAVyBDuW4htHCbPru63tZAJr1Eka/aU")
                .setRequestHead("Accept-Encoding","br, gzip, deflate").setRequestHead("citycode","796").setRequestHead("APP-BUILD-NUM","85")
                .setRequestHead("LANGUAGE","CHN").setRequestHead("Connection","keep-alive").setRequestHead("APPVER","2.4.0")
                .setRequestHead("Accept","*/*").setRequestHead("Accept-Language","zh-cn")
                .setRequestHead("tsinfo",tsinfo).setRequestHead("interfaceCode",interfaceCode);
        String body = null;
        try {
            body = myHttpClient.sendHttpPost(null, arrOutput);
        }catch (Exception e){
            LOG.error("接口调用异常interfaceCode"+interfaceCode+"tsinfo"+tsinfo,e);
        }
        return body;
    }

    public static void takeFriendsCoins() {
        List<Map<String,byte[]>> list = new ArrayList<Map<String, byte[]>>();
        //许老师
        Map<String,byte[]> yls = new HashMap<String, byte[]>();
        byte[] ylsBytes = { 0x0A, 0x06, 0x32, 0x2E, 0x32, 0x31, 0x2E, 0x31, 0x12, 0x13, 0x32, 0x30, 0x31, 0x38, 0x2D, 0x30, 0x39, 0x2D, 0x33, 0x30, 0x20, 0x31, 0x31, 0x3A, 0x33, 0x30, 0x3A, 0x32, 0x37, 0x1A, (byte)0xC2, (byte)0x80, 0x01, 0x57, 0x52, 0x71, 0x6F, 0x53, 0x70, 0x52, 0x57, 0x4E, 0x52, 0x4C, 0x32, 0x2F, 0x2F, 0x74, 0x30, 0x67, 0x6E, 0x47, 0x4A, 0x48, 0x71, 0x45, 0x36, 0x68, 0x70, 0x56, 0x56, 0x6B, 0x75, 0x6F, 0x48, 0x73, 0x41, 0x6F, 0x36, 0x6E, 0x38, 0x63, 0x33, 0x48, 0x56, 0x4C, 0x45, 0x34, 0x53, 0x39, 0x7A, 0x4F, 0x4C, 0x47, 0x59, 0x48, 0x6C, 0x46, 0x4A, 0x49, 0x50, 0x34, 0x44, 0x59, 0x6F, 0x38, 0x72, 0x6F, 0x70, 0x67, 0x73, 0x42, 0x58, 0x52, 0x41, 0x7A, 0x4C, 0x45, 0x6E, 0x54, 0x4E, 0x71, 0x7A, 0x65, 0x48, 0x6F, 0x2B, 0x64, 0x75, 0x4F, 0x51, 0x64, 0x44, 0x44, 0x56, 0x46, 0x71, 0x55, 0x52, 0x71, 0x33, 0x63, 0x6E, 0x72, 0x6E, 0x65, 0x65, 0x7A, 0x59, 0x59, 0x75, 0x44, 0x78, 0x4C, 0x62, 0x76, 0x59, 0x37, 0x42, 0x36, 0x76, 0x53, 0x66, 0x6D, 0x6B, 0x70, 0x4B, 0x41, 0x6B, 0x44, 0x38, 0x22, 0x04, 0x31, 0x7C, 0x38, 0x35 };
        yls.put("DjRTXJI02ppG8pHQxVr8eA==",ylsBytes);
        list.add(yls);
        //房东 2M
        Map<String,byte[]> fd = new HashMap<String, byte[]>();
        byte[] fdBytes = { 0x0A, 0x06, 0x32, 0x2E, 0x32, 0x31, 0x2E, 0x31, 0x12, 0x13, 0x32, 0x30, 0x31, 0x38, 0x2D, 0x30, 0x39, 0x2D, 0x33, 0x30, 0x20, 0x31, 0x32, 0x3A, 0x31, 0x38, 0x3A, 0x34, 0x37, 0x1A, (byte)0xC2, (byte)0x80, 0x01, 0x57, 0x52, 0x71, 0x6F, 0x53, 0x70, 0x52, 0x57, 0x4E, 0x52, 0x4C, 0x32, 0x2F, 0x2F, 0x74, 0x30, 0x67, 0x6E, 0x47, 0x4A, 0x48, 0x71, 0x45, 0x36, 0x68, 0x70, 0x56, 0x56, 0x6B, 0x75, 0x6F, 0x48, 0x73, 0x41, 0x6F, 0x36, 0x6E, 0x38, 0x63, 0x33, 0x48, 0x56, 0x4C, 0x45, 0x34, 0x53, 0x39, 0x7A, 0x4F, 0x4C, 0x47, 0x59, 0x48, 0x6C, 0x46, 0x4A, 0x49, 0x50, 0x34, 0x44, 0x59, 0x6F, 0x38, 0x72, 0x6F, 0x70, 0x67, 0x73, 0x42, 0x58, 0x52, 0x41, 0x7A, 0x4C, 0x47, 0x53, 0x75, 0x77, 0x37, 0x34, 0x30, 0x33, 0x67, 0x5A, 0x77, 0x77, 0x6B, 0x52, 0x49, 0x63, 0x75, 0x63, 0x4A, 0x78, 0x69, 0x30, 0x63, 0x56, 0x57, 0x63, 0x42, 0x6F, 0x74, 0x62, 0x54, 0x2F, 0x31, 0x77, 0x39, 0x32, 0x77, 0x44, 0x4A, 0x65, 0x37, 0x79, 0x45, 0x57, 0x73, 0x30, 0x68, 0x75, 0x4C, 0x36, 0x7A, 0x72, 0x6E, 0x4F, 0x22, 0x04, 0x31, 0x7C, 0x38, 0x35 };
        fd.put("ibJHcPOqeF7K+696jKh46g==",fdBytes);
        list.add(fd);
        //彭佳敏
        Map<String,byte[]> pjm = new HashMap<String, byte[]>();
        byte[] pjmBytes =  { 0x0A, 0x06, 0x32, 0x2E, 0x32, 0x31, 0x2E, 0x31, 0x12, 0x13, 0x32, 0x30, 0x31, 0x38, 0x2D, 0x30, 0x39, 0x2D, 0x33, 0x30, 0x20, 0x31, 0x33, 0x3A, 0x30, 0x32, 0x3A, 0x30, 0x33, 0x1A, (byte)0xC2, (byte)0x80, 0x01, 0x57, 0x52, 0x71, 0x6F, 0x53, 0x70, 0x52, 0x57, 0x4E, 0x52, 0x4C, 0x32, 0x2F, 0x2F, 0x74, 0x30, 0x67, 0x6E, 0x47, 0x4A, 0x48, 0x71, 0x45, 0x36, 0x68, 0x70, 0x56, 0x56, 0x6B, 0x75, 0x6F, 0x48, 0x73, 0x41, 0x6F, 0x36, 0x6E, 0x38, 0x63, 0x33, 0x48, 0x56, 0x4C, 0x45, 0x34, 0x53, 0x39, 0x7A, 0x4F, 0x4C, 0x47, 0x59, 0x48, 0x6C, 0x46, 0x4A, 0x49, 0x50, 0x34, 0x44, 0x59, 0x6F, 0x38, 0x72, 0x6F, 0x70, 0x67, 0x73, 0x42, 0x58, 0x52, 0x41, 0x7A, 0x4C, 0x46, 0x4A, 0x45, 0x4B, 0x72, 0x5A, 0x51, 0x39, 0x78, 0x35, 0x37, 0x35, 0x6E, 0x35, 0x37, 0x4B, 0x4A, 0x58, 0x4F, 0x57, 0x56, 0x42, 0x66, 0x44, 0x4A, 0x54, 0x77, 0x68, 0x41, 0x62, 0x57, 0x38, 0x43, 0x4D, 0x4D, 0x67, 0x2F, 0x4F, 0x6E, 0x62, 0x44, 0x6D, 0x56, 0x6A, 0x50, 0x30, 0x45, 0x72, 0x48, 0x7A, 0x49, 0x43, 0x57, 0x62, 0x22, 0x04, 0x31, 0x7C, 0x38, 0x35 };
        pjm.put("AVqSxa9QmJMGp1gcjH5QqA==",pjmBytes);
        list.add(pjm);
        //杨平 6M
        Map<String,byte[]> yp = new HashMap<String, byte[]>();
        byte[] ypBytes = { 0x0A, 0x06, 0x32, 0x2E, 0x32, 0x31, 0x2E, 0x31, 0x12, 0x13, 0x32, 0x30, 0x31, 0x38, 0x2D, 0x30, 0x39, 0x2D, 0x33, 0x30, 0x20, 0x31, 0x33, 0x3A, 0x30, 0x39, 0x3A, 0x30, 0x33, 0x1A, (byte)0xC2, (byte)0x80, 0x01, 0x57, 0x52, 0x71, 0x6F, 0x53, 0x70, 0x52, 0x57, 0x4E, 0x52, 0x4C, 0x32, 0x2F, 0x2F, 0x74, 0x30, 0x67, 0x6E, 0x47, 0x4A, 0x48, 0x71, 0x45, 0x36, 0x68, 0x70, 0x56, 0x56, 0x6B, 0x75, 0x6F, 0x48, 0x73, 0x41, 0x6F, 0x36, 0x6E, 0x38, 0x63, 0x33, 0x48, 0x56, 0x4C, 0x45, 0x34, 0x53, 0x39, 0x7A, 0x4F, 0x4C, 0x47, 0x59, 0x48, 0x6C, 0x46, 0x4A, 0x49, 0x50, 0x34, 0x44, 0x59, 0x6F, 0x38, 0x72, 0x6F, 0x70, 0x67, 0x73, 0x42, 0x58, 0x52, 0x41, 0x7A, 0x4C, 0x47, 0x62, 0x51, 0x55, 0x4C, 0x39, 0x47, 0x35, 0x6E, 0x6C, 0x76, 0x31, 0x65, 0x6F, 0x2F, 0x7A, 0x4F, 0x67, 0x37, 0x57, 0x2B, 0x65, 0x63, 0x2F, 0x46, 0x4F, 0x77, 0x50, 0x73, 0x74, 0x54, 0x59, 0x32, 0x5A, 0x43, 0x4F, 0x33, 0x41, 0x30, 0x7A, 0x2B, 0x62, 0x2F, 0x7A, 0x79, 0x66, 0x36, 0x4A, 0x75, 0x65, 0x59, 0x74, 0x73, 0x46, 0x22, 0x04, 0x31, 0x7C, 0x38, 0x35 };
        yp.put("wwYhqEN9xcbHxPSYDWhkNA==",ypBytes);
        list.add(yp);
        //刘玉莲 6M
        Map<String,byte[]> lyl = new HashMap<String, byte[]>();
        byte[] lylBytes = { 0x0A, 0x06, 0x32, 0x2E, 0x32, 0x31, 0x2E, 0x31, 0x12, 0x13, 0x32, 0x30, 0x31, 0x38, 0x2D, 0x30, 0x39, 0x2D, 0x33, 0x30, 0x20, 0x31, 0x33, 0x3A, 0x31, 0x34, 0x3A, 0x32, 0x39, 0x1A, (byte)0xC2, (byte)0x80, 0x01, 0x57, 0x52, 0x71, 0x6F, 0x53, 0x70, 0x52, 0x57, 0x4E, 0x52, 0x4C, 0x32, 0x2F, 0x2F, 0x74, 0x30, 0x67, 0x6E, 0x47, 0x4A, 0x48, 0x71, 0x45, 0x36, 0x68, 0x70, 0x56, 0x56, 0x6B, 0x75, 0x6F, 0x48, 0x73, 0x41, 0x6F, 0x36, 0x6E, 0x38, 0x63, 0x33, 0x48, 0x56, 0x4C, 0x45, 0x34, 0x53, 0x39, 0x7A, 0x4F, 0x4C, 0x47, 0x59, 0x48, 0x6C, 0x46, 0x4A, 0x49, 0x50, 0x34, 0x44, 0x59, 0x6F, 0x38, 0x72, 0x6F, 0x70, 0x67, 0x73, 0x42, 0x58, 0x52, 0x41, 0x7A, 0x4C, 0x47, 0x62, 0x51, 0x55, 0x4C, 0x39, 0x47, 0x35, 0x6E, 0x6C, 0x76, 0x79, 0x63, 0x6E, 0x43, 0x55, 0x68, 0x4A, 0x55, 0x6C, 0x77, 0x58, 0x56, 0x35, 0x42, 0x71, 0x59, 0x4B, 0x74, 0x66, 0x6C, 0x65, 0x6F, 0x43, 0x4D, 0x5A, 0x37, 0x49, 0x30, 0x74, 0x71, 0x46, 0x6B, 0x55, 0x51, 0x56, 0x34, 0x68, 0x6E, 0x71, 0x71, 0x43, 0x36, 0x30, 0x22, 0x04, 0x31, 0x7C, 0x38, 0x35 };
        lyl.put("HdFywIG1dljYXxIjpNmRiQ==",lylBytes);
        list.add(lyl);
        //黄金萍
        Map<String,byte[]> hjp = new HashMap<String, byte[]>();
        byte[] hjpBytes = { 0x0A, 0x06, 0x32, 0x2E, 0x32, 0x31, 0x2E, 0x31, 0x12, 0x13, 0x32, 0x30, 0x31, 0x38, 0x2D, 0x30, 0x39, 0x2D, 0x33, 0x30, 0x20, 0x31, 0x34, 0x3A, 0x34, 0x34, 0x3A, 0x31, 0x39, 0x1A, (byte)0xC2, (byte)0x80, 0x01, 0x57, 0x52, 0x71, 0x6F, 0x53, 0x70, 0x52, 0x57, 0x4E, 0x52, 0x4C, 0x32, 0x2F, 0x2F, 0x74, 0x30, 0x67, 0x6E, 0x47, 0x4A, 0x48, 0x71, 0x45, 0x36, 0x68, 0x70, 0x56, 0x56, 0x6B, 0x75, 0x6F, 0x48, 0x73, 0x41, 0x6F, 0x36, 0x6E, 0x38, 0x63, 0x33, 0x48, 0x56, 0x4C, 0x45, 0x34, 0x53, 0x39, 0x7A, 0x4F, 0x4C, 0x47, 0x59, 0x48, 0x6C, 0x46, 0x4A, 0x49, 0x50, 0x34, 0x44, 0x59, 0x6F, 0x38, 0x72, 0x6F, 0x70, 0x67, 0x73, 0x42, 0x58, 0x52, 0x41, 0x7A, 0x4C, 0x45, 0x79, 0x31, 0x67, 0x75, 0x31, 0x54, 0x46, 0x33, 0x68, 0x2F, 0x77, 0x2B, 0x77, 0x33, 0x74, 0x64, 0x55, 0x2B, 0x4E, 0x51, 0x7A, 0x4E, 0x70, 0x6C, 0x36, 0x72, 0x6D, 0x6C, 0x46, 0x32, 0x57, 0x4C, 0x56, 0x39, 0x77, 0x36, 0x57, 0x52, 0x47, 0x42, 0x44, 0x4A, 0x57, 0x66, 0x6E, 0x2B, 0x4C, 0x61, 0x30, 0x78, 0x59, 0x78, 0x78, 0x22, 0x04, 0x31, 0x7C, 0x38, 0x35 };
        hjp.put("NcBfor/xUDeAFOpkeeN4+g==",hjpBytes);
        list.add(hjp);

        //胡
        Map<String,byte[]> h = new HashMap<String, byte[]>();
        byte[] hBytes = { 0x0A, 0x06, 0x32, 0x2E, 0x32, 0x31, 0x2E, 0x31, 0x12, 0x13, 0x32, 0x30, 0x31, 0x38, 0x2D, 0x30, 0x39, 0x2D, 0x33, 0x30, 0x20, 0x31, 0x35, 0x3A, 0x33, 0x34, 0x3A, 0x30, 0x34, 0x1A, (byte)0xC2, (byte)0x80, 0x01, 0x57, 0x52, 0x71, 0x6F, 0x53, 0x70, 0x52, 0x57, 0x4E, 0x52, 0x4C, 0x32, 0x2F, 0x2F, 0x74, 0x30, 0x67, 0x6E, 0x47, 0x4A, 0x48, 0x71, 0x45, 0x36, 0x68, 0x70, 0x56, 0x56, 0x6B, 0x75, 0x6F, 0x48, 0x73, 0x41, 0x6F, 0x36, 0x6E, 0x38, 0x63, 0x33, 0x48, 0x56, 0x4C, 0x45, 0x34, 0x53, 0x39, 0x7A, 0x4F, 0x4C, 0x47, 0x59, 0x48, 0x6C, 0x46, 0x4A, 0x49, 0x50, 0x34, 0x44, 0x59, 0x6F, 0x38, 0x72, 0x6F, 0x70, 0x67, 0x73, 0x42, 0x58, 0x52, 0x41, 0x7A, 0x4C, 0x45, 0x48, 0x64, 0x2F, 0x7A, 0x4D, 0x59, 0x4E, 0x4E, 0x30, 0x65, 0x6A, 0x73, 0x63, 0x68, 0x5A, 0x61, 0x52, 0x37, 0x66, 0x72, 0x50, 0x52, 0x75, 0x36, 0x50, 0x47, 0x72, 0x55, 0x33, 0x37, 0x34, 0x59, 0x78, 0x6D, 0x43, 0x5A, 0x64, 0x69, 0x79, 0x65, 0x50, 0x70, 0x74, 0x59, 0x69, 0x4E, 0x4F, 0x4B, 0x74, 0x69, 0x6F, 0x75, 0x69, 0x22, 0x04, 0x31, 0x7C, 0x38, 0x35 };
        h.put("iYSR8+hg0O83AP7+j7dyFw==",hBytes);
        list.add(h);
        //h1
        Map<String,byte[]> h1 = new HashMap<String, byte[]>();
        byte[] h1Bytes = { 0x0A, 0x06, 0x32, 0x2E, 0x32, 0x31, 0x2E, 0x31, 0x12, 0x13, 0x32, 0x30, 0x31, 0x38, 0x2D, 0x30, 0x39, 0x2D, 0x33, 0x30, 0x20, 0x31, 0x36, 0x3A, 0x32, 0x33, 0x3A, 0x33, 0x34, 0x1A, (byte)0xC2, (byte)0x80, 0x01, 0x57, 0x52, 0x71, 0x6F, 0x53, 0x70, 0x52, 0x57, 0x4E, 0x52, 0x4C, 0x32, 0x2F, 0x2F, 0x74, 0x30, 0x67, 0x6E, 0x47, 0x4A, 0x48, 0x71, 0x45, 0x36, 0x68, 0x70, 0x56, 0x56, 0x6B, 0x75, 0x6F, 0x48, 0x73, 0x41, 0x6F, 0x36, 0x6E, 0x38, 0x63, 0x33, 0x48, 0x56, 0x4C, 0x45, 0x34, 0x53, 0x39, 0x7A, 0x4F, 0x4C, 0x47, 0x59, 0x48, 0x6C, 0x46, 0x4A, 0x49, 0x50, 0x34, 0x44, 0x59, 0x6F, 0x38, 0x72, 0x6F, 0x70, 0x67, 0x73, 0x42, 0x58, 0x52, 0x41, 0x7A, 0x4C, 0x46, 0x33, 0x47, 0x33, 0x65, 0x44, 0x6E, 0x48, 0x75, 0x32, 0x4A, 0x7A, 0x6A, 0x4E, 0x6C, 0x75, 0x47, 0x30, 0x69, 0x31, 0x30, 0x37, 0x4E, 0x72, 0x6A, 0x2F, 0x35, 0x2F, 0x2B, 0x76, 0x68, 0x54, 0x31, 0x6F, 0x5A, 0x7A, 0x64, 0x42, 0x2F, 0x7A, 0x6B, 0x35, 0x73, 0x39, 0x36, 0x74, 0x36, 0x6E, 0x6E, 0x66, 0x4B, 0x74, 0x46, 0x42, 0x22, 0x04, 0x31, 0x7C, 0x38, 0x35 };
        h1.put("N0WggS6kWu7OP9KFHYs3Cg==",h1Bytes);
        list.add(h1);
        //刘志明
        Map<String,byte[]> lzm = new HashMap<String, byte[]>();
        byte[] lzmBytes = { 0x0A, 0x06, 0x32, 0x2E, 0x32, 0x31, 0x2E, 0x31, 0x12, 0x13, 0x32, 0x30, 0x31, 0x38, 0x2D, 0x31, 0x30, 0x2D, 0x30, 0x31, 0x20, 0x30, 0x38, 0x3A, 0x33, 0x32, 0x3A, 0x34, 0x33, 0x1A, (byte)0xC2, (byte)0x80, 0x01, 0x57, 0x52, 0x71, 0x6F, 0x53, 0x70, 0x52, 0x57, 0x4E, 0x52, 0x4C, 0x32, 0x2F, 0x2F, 0x74, 0x30, 0x67, 0x6E, 0x47, 0x4A, 0x48, 0x71, 0x45, 0x36, 0x68, 0x70, 0x56, 0x56, 0x6B, 0x75, 0x6F, 0x48, 0x73, 0x41, 0x6F, 0x36, 0x6E, 0x38, 0x63, 0x33, 0x48, 0x56, 0x4C, 0x45, 0x34, 0x53, 0x39, 0x7A, 0x4F, 0x4C, 0x47, 0x59, 0x48, 0x6C, 0x46, 0x4A, 0x49, 0x50, 0x34, 0x44, 0x59, 0x6F, 0x38, 0x72, 0x6F, 0x70, 0x67, 0x73, 0x42, 0x58, 0x52, 0x41, 0x7A, 0x4C, 0x46, 0x6B, 0x45, 0x51, 0x36, 0x72, 0x41, 0x6A, 0x71, 0x36, 0x54, 0x77, 0x64, 0x4E, 0x65, 0x76, 0x6C, 0x43, 0x39, 0x58, 0x7A, 0x48, 0x41, 0x6D, 0x51, 0x6A, 0x54, 0x6B, 0x43, 0x79, 0x44, 0x76, 0x6A, 0x46, 0x53, 0x34, 0x62, 0x4C, 0x41, 0x32, 0x55, 0x42, 0x35, 0x77, 0x7A, 0x47, 0x30, 0x36, 0x57, 0x77, 0x73, 0x70, 0x55, 0x50, 0x22, 0x04, 0x31, 0x7C, 0x38, 0x35 };
        lzm.put("y3XrGcv7WxrjFSwTWNjpvg==",lzmBytes);
        list.add(lzm);
        //何美星
        Map<String,byte[]> hmx = new HashMap<String, byte[]>();
        byte[] hmxBytes = { 0x0A, 0x06, 0x32, 0x2E, 0x32, 0x31, 0x2E, 0x31, 0x12, 0x13, 0x32, 0x30, 0x31, 0x38, 0x2D, 0x31, 0x30, 0x2D, 0x30, 0x31, 0x20, 0x30, 0x38, 0x3A, 0x33, 0x36, 0x3A, 0x35, 0x37, 0x1A, (byte)0xC2, (byte)0x80, 0x01, 0x57, 0x52, 0x71, 0x6F, 0x53, 0x70, 0x52, 0x57, 0x4E, 0x52, 0x4C, 0x32, 0x2F, 0x2F, 0x74, 0x30, 0x67, 0x6E, 0x47, 0x4A, 0x48, 0x71, 0x45, 0x36, 0x68, 0x70, 0x56, 0x56, 0x6B, 0x75, 0x6F, 0x48, 0x73, 0x41, 0x6F, 0x36, 0x6E, 0x38, 0x63, 0x33, 0x48, 0x56, 0x4C, 0x45, 0x34, 0x53, 0x39, 0x7A, 0x4F, 0x4C, 0x47, 0x59, 0x48, 0x6C, 0x46, 0x4A, 0x49, 0x50, 0x34, 0x44, 0x59, 0x6F, 0x38, 0x72, 0x6F, 0x70, 0x67, 0x73, 0x42, 0x58, 0x52, 0x41, 0x7A, 0x4C, 0x46, 0x6D, 0x63, 0x7A, 0x7A, 0x4E, 0x73, 0x2B, 0x56, 0x59, 0x32, 0x44, 0x7A, 0x56, 0x54, 0x54, 0x4B, 0x39, 0x31, 0x2F, 0x70, 0x61, 0x7A, 0x66, 0x6B, 0x52, 0x47, 0x6D, 0x69, 0x30, 0x5A, 0x39, 0x59, 0x6A, 0x31, 0x38, 0x4B, 0x68, 0x5A, 0x51, 0x50, 0x49, 0x73, 0x2F, 0x37, 0x48, 0x5A, 0x52, 0x67, 0x37, 0x71, 0x73, 0x59, 0x6F, 0x22, 0x04, 0x31, 0x7C, 0x38, 0x35 };
        hmx.put("yy3iW8clttmvpPBwImkcDg==",hmxBytes);
        list.add(hmx);
        //彭雪华
        Map<String,byte[]> pxh = new HashMap<String, byte[]>();
        byte[] pxhBytes = { 0x0A, 0x06, 0x32, 0x2E, 0x32, 0x31, 0x2E, 0x31, 0x12, 0x13, 0x32, 0x30, 0x31, 0x38, 0x2D, 0x31, 0x30, 0x2D, 0x30, 0x31, 0x20, 0x30, 0x38, 0x3A, 0x33, 0x37, 0x3A, 0x30, 0x32, 0x1A, (byte)0xC2, (byte)0x80, 0x01, 0x57, 0x52, 0x71, 0x6F, 0x53, 0x70, 0x52, 0x57, 0x4E, 0x52, 0x4C, 0x32, 0x2F, 0x2F, 0x74, 0x30, 0x67, 0x6E, 0x47, 0x4A, 0x48, 0x71, 0x45, 0x36, 0x68, 0x70, 0x56, 0x56, 0x6B, 0x75, 0x6F, 0x48, 0x73, 0x41, 0x6F, 0x36, 0x6E, 0x38, 0x63, 0x33, 0x48, 0x56, 0x4C, 0x45, 0x34, 0x53, 0x39, 0x7A, 0x4F, 0x4C, 0x47, 0x59, 0x48, 0x6C, 0x46, 0x4A, 0x49, 0x50, 0x34, 0x44, 0x59, 0x6F, 0x38, 0x72, 0x6F, 0x70, 0x67, 0x73, 0x42, 0x58, 0x52, 0x41, 0x7A, 0x4C, 0x46, 0x6D, 0x63, 0x7A, 0x7A, 0x4E, 0x73, 0x2B, 0x56, 0x59, 0x32, 0x47, 0x69, 0x43, 0x70, 0x54, 0x4E, 0x72, 0x4C, 0x38, 0x4B, 0x71, 0x62, 0x4A, 0x4E, 0x39, 0x31, 0x37, 0x70, 0x76, 0x32, 0x46, 0x36, 0x43, 0x58, 0x37, 0x75, 0x2B, 0x67, 0x6E, 0x50, 0x62, 0x76, 0x6F, 0x52, 0x54, 0x58, 0x5A, 0x69, 0x46, 0x72, 0x6C, 0x78, 0x75, 0x22, 0x04, 0x31, 0x7C, 0x38, 0x35 };
        pxh.put("yy3iW8clttlb3JbZyM0pzw==",pxhBytes);
        list.add(pxh);
        //秋莲
        Map<String,byte[]> ql = new HashMap<String, byte[]>();
        byte[] qlBytes = { 0x0A, 0x06, 0x32, 0x2E, 0x32, 0x31, 0x2E, 0x31, 0x12, 0x13, 0x32, 0x30, 0x31, 0x38, 0x2D, 0x31, 0x30, 0x2D, 0x30, 0x31, 0x20, 0x30, 0x38, 0x3A, 0x35, 0x32, 0x3A, 0x31, 0x35, 0x1A, (byte)0xC2, (byte)0x80, 0x01, 0x57, 0x52, 0x71, 0x6F, 0x53, 0x70, 0x52, 0x57, 0x4E, 0x52, 0x4C, 0x32, 0x2F, 0x2F, 0x74, 0x30, 0x67, 0x6E, 0x47, 0x4A, 0x48, 0x71, 0x45, 0x36, 0x68, 0x70, 0x56, 0x56, 0x6B, 0x75, 0x6F, 0x48, 0x73, 0x41, 0x6F, 0x36, 0x6E, 0x38, 0x63, 0x33, 0x48, 0x56, 0x4C, 0x45, 0x34, 0x53, 0x39, 0x7A, 0x4F, 0x4C, 0x47, 0x59, 0x48, 0x6C, 0x46, 0x4A, 0x49, 0x50, 0x34, 0x44, 0x59, 0x6F, 0x38, 0x72, 0x6F, 0x70, 0x67, 0x73, 0x42, 0x58, 0x52, 0x41, 0x7A, 0x4C, 0x45, 0x33, 0x52, 0x56, 0x69, 0x65, 0x48, 0x66, 0x67, 0x47, 0x6B, 0x4B, 0x46, 0x38, 0x42, 0x69, 0x44, 0x2F, 0x7A, 0x4B, 0x62, 0x4E, 0x4D, 0x4F, 0x52, 0x76, 0x37, 0x75, 0x63, 0x78, 0x71, 0x6E, 0x78, 0x53, 0x36, 0x4E, 0x36, 0x7A, 0x62, 0x76, 0x30, 0x4F, 0x33, 0x4B, 0x41, 0x42, 0x5A, 0x52, 0x71, 0x46, 0x4F, 0x32, 0x44, 0x58, 0x22, 0x04, 0x31, 0x7C, 0x38, 0x35 };
        ql.put("xnpctydtoXjiYPCOl2htqQ==",qlBytes);
        list.add(ql);
        //赵伯财
        Map<String,byte[]> zbc = new HashMap<String, byte[]>();
        byte[] zbcBytes = { 0x0A, 0x06, 0x32, 0x2E, 0x32, 0x31, 0x2E, 0x31, 0x12, 0x13, 0x32, 0x30, 0x31, 0x38, 0x2D, 0x31, 0x30, 0x2D, 0x30, 0x31, 0x20, 0x30, 0x39, 0x3A, 0x30, 0x31, 0x3A, 0x34, 0x35, 0x1A, (byte)0xC2, (byte)0x80, 0x01, 0x57, 0x52, 0x71, 0x6F, 0x53, 0x70, 0x52, 0x57, 0x4E, 0x52, 0x4C, 0x32, 0x2F, 0x2F, 0x74, 0x30, 0x67, 0x6E, 0x47, 0x4A, 0x48, 0x71, 0x45, 0x36, 0x68, 0x70, 0x56, 0x56, 0x6B, 0x75, 0x6F, 0x48, 0x73, 0x41, 0x6F, 0x36, 0x6E, 0x38, 0x63, 0x33, 0x48, 0x56, 0x4C, 0x45, 0x34, 0x53, 0x39, 0x7A, 0x4F, 0x4C, 0x47, 0x59, 0x48, 0x6C, 0x46, 0x4A, 0x49, 0x50, 0x34, 0x44, 0x59, 0x6F, 0x38, 0x72, 0x6F, 0x70, 0x67, 0x73, 0x42, 0x58, 0x52, 0x41, 0x7A, 0x4C, 0x45, 0x33, 0x52, 0x56, 0x69, 0x65, 0x48, 0x66, 0x67, 0x47, 0x6B, 0x45, 0x47, 0x44, 0x77, 0x45, 0x69, 0x49, 0x68, 0x33, 0x77, 0x51, 0x79, 0x67, 0x2F, 0x44, 0x77, 0x33, 0x51, 0x63, 0x33, 0x39, 0x6D, 0x37, 0x4F, 0x69, 0x36, 0x7A, 0x2F, 0x2B, 0x45, 0x2F, 0x35, 0x4D, 0x50, 0x5A, 0x2F, 0x71, 0x59, 0x59, 0x63, 0x70, 0x76, 0x74, 0x22, 0x04, 0x31, 0x7C, 0x38, 0x35 };
        zbc.put("serMDpdrJciOWgN83hOzvg==",zbcBytes);
        list.add(zbc);
        //冬冬
        Map<String,byte[]> dd = new HashMap<String, byte[]>();
        byte[] ddBytes = { 0x0A, 0x06, 0x32, 0x2E, 0x32, 0x31, 0x2E, 0x31, 0x12, 0x13, 0x32, 0x30, 0x31, 0x38, 0x2D, 0x31, 0x30, 0x2D, 0x30, 0x31, 0x20, 0x30, 0x39, 0x3A, 0x35, 0x34, 0x3A, 0x32, 0x32, 0x1A, (byte)0xC2, (byte)0x80, 0x01, 0x57, 0x52, 0x71, 0x6F, 0x53, 0x70, 0x52, 0x57, 0x4E, 0x52, 0x4C, 0x32, 0x2F, 0x2F, 0x74, 0x30, 0x67, 0x6E, 0x47, 0x4A, 0x48, 0x71, 0x45, 0x36, 0x68, 0x70, 0x56, 0x56, 0x6B, 0x75, 0x6F, 0x48, 0x73, 0x41, 0x6F, 0x36, 0x6E, 0x38, 0x63, 0x33, 0x48, 0x56, 0x4C, 0x45, 0x34, 0x53, 0x39, 0x7A, 0x4F, 0x4C, 0x47, 0x59, 0x48, 0x6C, 0x46, 0x4A, 0x49, 0x50, 0x34, 0x44, 0x59, 0x6F, 0x38, 0x72, 0x6F, 0x70, 0x67, 0x73, 0x42, 0x58, 0x52, 0x41, 0x7A, 0x4C, 0x45, 0x79, 0x2B, 0x66, 0x71, 0x54, 0x4C, 0x73, 0x6E, 0x45, 0x58, 0x54, 0x56, 0x44, 0x4D, 0x54, 0x2F, 0x51, 0x74, 0x41, 0x6A, 0x6C, 0x50, 0x56, 0x47, 0x2B, 0x77, 0x78, 0x2F, 0x4B, 0x4B, 0x6D, 0x74, 0x78, 0x70, 0x61, 0x4B, 0x48, 0x34, 0x62, 0x46, 0x66, 0x6C, 0x71, 0x62, 0x34, 0x52, 0x56, 0x32, 0x4B, 0x4E, 0x6B, 0x75, 0x65, 0x22, 0x04, 0x31, 0x7C, 0x38, 0x35 };
        dd.put("kPOin1QHJAxvRuTlsfZmnw==",ddBytes);
        list.add(dd);
        //h2
        Map<String,byte[]> h2 = new HashMap<String, byte[]>();
        byte[] h2Bytes = { 0x0A, 0x06, 0x32, 0x2E, 0x32, 0x31, 0x2E, 0x31, 0x12, 0x13, 0x32, 0x30, 0x31, 0x38, 0x2D, 0x31, 0x30, 0x2D, 0x30, 0x31, 0x20, 0x31, 0x30, 0x3A, 0x31, 0x37, 0x3A, 0x34, 0x31, 0x1A, (byte)0xC2, (byte)0x80, 0x01, 0x57, 0x52, 0x71, 0x6F, 0x53, 0x70, 0x52, 0x57, 0x4E, 0x52, 0x4C, 0x32, 0x2F, 0x2F, 0x74, 0x30, 0x67, 0x6E, 0x47, 0x4A, 0x48, 0x71, 0x45, 0x36, 0x68, 0x70, 0x56, 0x56, 0x6B, 0x75, 0x6F, 0x48, 0x73, 0x41, 0x6F, 0x36, 0x6E, 0x38, 0x63, 0x33, 0x48, 0x56, 0x4C, 0x45, 0x34, 0x53, 0x39, 0x7A, 0x4F, 0x4C, 0x47, 0x59, 0x48, 0x6C, 0x46, 0x4A, 0x49, 0x50, 0x34, 0x44, 0x59, 0x6F, 0x38, 0x72, 0x6F, 0x70, 0x67, 0x73, 0x42, 0x58, 0x52, 0x41, 0x7A, 0x4C, 0x48, 0x70, 0x44, 0x65, 0x66, 0x2B, 0x47, 0x63, 0x38, 0x4F, 0x47, 0x78, 0x6C, 0x54, 0x50, 0x33, 0x2B, 0x51, 0x59, 0x54, 0x70, 0x49, 0x47, 0x61, 0x30, 0x75, 0x52, 0x31, 0x47, 0x46, 0x4B, 0x54, 0x43, 0x37, 0x4F, 0x69, 0x36, 0x7A, 0x2F, 0x2B, 0x45, 0x2F, 0x35, 0x46, 0x6F, 0x51, 0x51, 0x31, 0x44, 0x34, 0x33, 0x33, 0x33, 0x4C, 0x22, 0x04, 0x31, 0x7C, 0x38, 0x35 };
        h2.put("bS/Qpp6c3eqLF0frrCbMKQ==",h2Bytes);
        list.add(h2);
        //万盛浪
        Map<String,byte[]> wsl = new HashMap<String, byte[]>();
        byte[] wslBytes = { 0x0A, 0x06, 0x32, 0x2E, 0x32, 0x31, 0x2E, 0x31, 0x12, 0x13, 0x32, 0x30, 0x31, 0x38, 0x2D, 0x31, 0x30, 0x2D, 0x30, 0x31, 0x20, 0x31, 0x30, 0x3A, 0x32, 0x39, 0x3A, 0x35, 0x31, 0x1A, (byte)0xC2, (byte)0x80, 0x01, 0x57, 0x52, 0x71, 0x6F, 0x53, 0x70, 0x52, 0x57, 0x4E, 0x52, 0x4C, 0x32, 0x2F, 0x2F, 0x74, 0x30, 0x67, 0x6E, 0x47, 0x4A, 0x48, 0x71, 0x45, 0x36, 0x68, 0x70, 0x56, 0x56, 0x6B, 0x75, 0x6F, 0x48, 0x73, 0x41, 0x6F, 0x36, 0x6E, 0x38, 0x63, 0x33, 0x48, 0x56, 0x4C, 0x45, 0x34, 0x53, 0x39, 0x7A, 0x4F, 0x4C, 0x47, 0x59, 0x48, 0x6C, 0x46, 0x4A, 0x49, 0x50, 0x34, 0x44, 0x59, 0x6F, 0x38, 0x72, 0x6F, 0x70, 0x67, 0x73, 0x42, 0x58, 0x52, 0x41, 0x7A, 0x4C, 0x48, 0x70, 0x44, 0x65, 0x66, 0x2B, 0x47, 0x63, 0x38, 0x4F, 0x47, 0x30, 0x39, 0x30, 0x6F, 0x6A, 0x5A, 0x70, 0x53, 0x58, 0x2F, 0x6C, 0x71, 0x5A, 0x2F, 0x43, 0x75, 0x38, 0x32, 0x55, 0x4B, 0x64, 0x45, 0x63, 0x49, 0x68, 0x30, 0x47, 0x64, 0x50, 0x69, 0x37, 0x7A, 0x55, 0x35, 0x30, 0x4A, 0x7A, 0x61, 0x61, 0x47, 0x30, 0x56, 0x63, 0x22, 0x04, 0x31, 0x7C, 0x38, 0x35 };
        wsl.put("PhCPq1hsI+x+aGOMTu31aQ==",wslBytes);
        list.add(wsl);
        //詹凌翔
        Map<String,byte[]> zlx = new HashMap<String, byte[]>();
        byte[] zlxBytes = { 0x0A, 0x06, 0x32, 0x2E, 0x32, 0x31, 0x2E, 0x31, 0x12, 0x13, 0x32, 0x30, 0x31, 0x38, 0x2D, 0x31, 0x30, 0x2D, 0x30, 0x31, 0x20, 0x31, 0x30, 0x3A, 0x33, 0x33, 0x3A, 0x35, 0x34, 0x1A, (byte)0xC2, (byte)0x80, 0x01, 0x57, 0x52, 0x71, 0x6F, 0x53, 0x70, 0x52, 0x57, 0x4E, 0x52, 0x4C, 0x32, 0x2F, 0x2F, 0x74, 0x30, 0x67, 0x6E, 0x47, 0x4A, 0x48, 0x71, 0x45, 0x36, 0x68, 0x70, 0x56, 0x56, 0x6B, 0x75, 0x6F, 0x48, 0x73, 0x41, 0x6F, 0x36, 0x6E, 0x38, 0x63, 0x33, 0x48, 0x56, 0x4C, 0x45, 0x34, 0x53, 0x39, 0x7A, 0x4F, 0x4C, 0x47, 0x59, 0x48, 0x6C, 0x46, 0x4A, 0x49, 0x50, 0x34, 0x44, 0x59, 0x6F, 0x38, 0x72, 0x6F, 0x70, 0x67, 0x73, 0x42, 0x58, 0x52, 0x41, 0x7A, 0x4C, 0x48, 0x6A, 0x6C, 0x6A, 0x6B, 0x7A, 0x44, 0x6D, 0x78, 0x4B, 0x66, 0x50, 0x77, 0x51, 0x55, 0x7A, 0x78, 0x57, 0x6A, 0x79, 0x6A, 0x31, 0x39, 0x6B, 0x53, 0x37, 0x62, 0x58, 0x45, 0x70, 0x33, 0x72, 0x4C, 0x36, 0x32, 0x67, 0x4E, 0x53, 0x31, 0x2B, 0x69, 0x43, 0x73, 0x78, 0x5A, 0x53, 0x70, 0x76, 0x62, 0x52, 0x53, 0x56, 0x55, 0x2B, 0x22, 0x04, 0x31, 0x7C, 0x38, 0x35 };
        zlx.put("n1FS154wcxIqGxyZEBduoA==",zlxBytes);
        list.add(zlx);
        //赖玉成
        Map<String,byte[]> lyc = new HashMap<String, byte[]>();
        byte[] lycBytes = { 0x0A, 0x06, 0x32, 0x2E, 0x32, 0x31, 0x2E, 0x31, 0x12, 0x13, 0x32, 0x30, 0x31, 0x38, 0x2D, 0x31, 0x30, 0x2D, 0x30, 0x31, 0x20, 0x31, 0x31, 0x3A, 0x33, 0x36, 0x3A, 0x35, 0x38, 0x1A, (byte)0xC2, (byte)0x80, 0x01, 0x57, 0x52, 0x71, 0x6F, 0x53, 0x70, 0x52, 0x57, 0x4E, 0x52, 0x4C, 0x32, 0x2F, 0x2F, 0x74, 0x30, 0x67, 0x6E, 0x47, 0x4A, 0x48, 0x71, 0x45, 0x36, 0x68, 0x70, 0x56, 0x56, 0x6B, 0x75, 0x6F, 0x48, 0x73, 0x41, 0x6F, 0x36, 0x6E, 0x38, 0x63, 0x33, 0x48, 0x56, 0x4C, 0x45, 0x34, 0x53, 0x39, 0x7A, 0x4F, 0x4C, 0x47, 0x59, 0x48, 0x6C, 0x46, 0x4A, 0x49, 0x50, 0x34, 0x44, 0x59, 0x6F, 0x38, 0x72, 0x6F, 0x70, 0x67, 0x73, 0x42, 0x58, 0x52, 0x41, 0x7A, 0x4C, 0x45, 0x55, 0x6A, 0x2F, 0x43, 0x72, 0x53, 0x6B, 0x32, 0x4F, 0x55, 0x53, 0x74, 0x78, 0x68, 0x41, 0x46, 0x59, 0x79, 0x43, 0x2B, 0x67, 0x73, 0x34, 0x62, 0x35, 0x74, 0x75, 0x33, 0x6B, 0x37, 0x71, 0x41, 0x61, 0x4B, 0x34, 0x6E, 0x43, 0x46, 0x45, 0x6B, 0x51, 0x73, 0x75, 0x77, 0x48, 0x5A, 0x30, 0x7A, 0x74, 0x6D, 0x42, 0x6C, 0x69, 0x22, 0x04, 0x31, 0x7C, 0x38, 0x35 };
        lyc.put("CjUvpw2lOd2FvDkgxEZUFQ==",lycBytes);
        list.add(lyc);

        Map<String,byte[]> xm = new HashMap<String, byte[]>();
        byte[] xmBytes = { 0x0A, 0x06, 0x32, 0x2E, 0x32, 0x31, 0x2E, 0x31, 0x12, 0x13, 0x32, 0x30, 0x31, 0x38, 0x2D, 0x31, 0x30, 0x2D, 0x30, 0x32, 0x20, 0x31, 0x31, 0x3A, 0x30, 0x35, 0x3A, 0x33, 0x39, 0x1A, (byte)0xC2, (byte)0x80, 0x01, 0x57, 0x52, 0x71, 0x6F, 0x53, 0x70, 0x52, 0x57, 0x4E, 0x52, 0x4C, 0x32, 0x2F, 0x2F, 0x74, 0x30, 0x67, 0x6E, 0x47, 0x4A, 0x48, 0x71, 0x45, 0x36, 0x68, 0x70, 0x56, 0x56, 0x6B, 0x75, 0x6F, 0x48, 0x73, 0x41, 0x6F, 0x36, 0x6E, 0x38, 0x63, 0x33, 0x48, 0x56, 0x4C, 0x45, 0x34, 0x53, 0x39, 0x7A, 0x4F, 0x4C, 0x47, 0x59, 0x48, 0x6C, 0x46, 0x4A, 0x49, 0x50, 0x34, 0x44, 0x59, 0x6F, 0x38, 0x72, 0x6F, 0x70, 0x67, 0x73, 0x42, 0x58, 0x52, 0x41, 0x7A, 0x4C, 0x48, 0x69, 0x61, 0x69, 0x67, 0x4C, 0x43, 0x63, 0x30, 0x4D, 0x31, 0x67, 0x55, 0x39, 0x6B, 0x5A, 0x45, 0x47, 0x57, 0x36, 0x54, 0x2F, 0x59, 0x32, 0x69, 0x73, 0x76, 0x54, 0x35, 0x69, 0x2F, 0x48, 0x4D, 0x39, 0x4E, 0x49, 0x58, 0x31, 0x58, 0x75, 0x31, 0x66, 0x35, 0x69, 0x71, 0x52, 0x65, 0x6F, 0x72, 0x51, 0x62, 0x46, 0x42, 0x4F, 0x22, 0x04, 0x31, 0x7C, 0x38, 0x35 };
        xm.put("CJfM3WVv+72w1KaePeDnUA==",xmBytes);
        list.add(xm);

        Map<String,byte[]> lwj = new HashMap<String, byte[]>();
        byte[] lwjBytes = { 0x0A, 0x06, 0x32, 0x2E, 0x32, 0x31, 0x2E, 0x31, 0x12, 0x13, 0x32, 0x30, 0x31, 0x38, 0x2D, 0x31, 0x30, 0x2D, 0x30, 0x33, 0x20, 0x30, 0x39, 0x3A, 0x31, 0x39, 0x3A, 0x35, 0x35, 0x1A, (byte)0xC2, (byte)0x80, 0x01, 0x57, 0x52, 0x71, 0x6F, 0x53, 0x70, 0x52, 0x57, 0x4E, 0x52, 0x4C, 0x32, 0x2F, 0x2F, 0x74, 0x30, 0x67, 0x6E, 0x47, 0x4A, 0x48, 0x71, 0x45, 0x36, 0x68, 0x70, 0x56, 0x56, 0x6B, 0x75, 0x6F, 0x48, 0x73, 0x41, 0x6F, 0x36, 0x6E, 0x38, 0x63, 0x33, 0x48, 0x56, 0x4C, 0x45, 0x34, 0x53, 0x39, 0x7A, 0x4F, 0x4C, 0x47, 0x59, 0x48, 0x6C, 0x46, 0x4A, 0x49, 0x50, 0x34, 0x44, 0x59, 0x6F, 0x38, 0x72, 0x6F, 0x70, 0x67, 0x73, 0x42, 0x58, 0x52, 0x41, 0x7A, 0x4C, 0x46, 0x71, 0x65, 0x4B, 0x76, 0x52, 0x4C, 0x30, 0x4B, 0x56, 0x75, 0x49, 0x79, 0x53, 0x32, 0x38, 0x6A, 0x6E, 0x46, 0x62, 0x70, 0x56, 0x71, 0x4F, 0x63, 0x4E, 0x68, 0x52, 0x6F, 0x6A, 0x2F, 0x4E, 0x49, 0x4A, 0x6D, 0x55, 0x72, 0x46, 0x33, 0x50, 0x59, 0x52, 0x70, 0x56, 0x6A, 0x6C, 0x7A, 0x30, 0x33, 0x76, 0x67, 0x66, 0x2F, 0x76, 0x22, 0x04, 0x31, 0x7C, 0x38, 0x35 };
        lwj.put("HDLI8FfEasUE6kqLITYZ0A==",lwjBytes);
        list.add(lwj);

        Map<String,byte[]> lwj2 = new HashMap<String, byte[]>();
        byte[] lwj2Bytes = { 0x0A, 0x06, 0x32, 0x2E, 0x32, 0x31, 0x2E, 0x31, 0x12, 0x13, 0x32, 0x30, 0x31, 0x38, 0x2D, 0x31, 0x30, 0x2D, 0x30, 0x36, 0x20, 0x31, 0x31, 0x3A, 0x34, 0x31, 0x3A, 0x34, 0x38, 0x1A, (byte)0xC2, (byte)0x80, 0x01, 0x57, 0x52, 0x71, 0x6F, 0x53, 0x70, 0x52, 0x57, 0x4E, 0x52, 0x4C, 0x32, 0x2F, 0x2F, 0x74, 0x30, 0x67, 0x6E, 0x47, 0x4A, 0x48, 0x71, 0x45, 0x36, 0x68, 0x70, 0x56, 0x56, 0x6B, 0x75, 0x6F, 0x48, 0x73, 0x41, 0x6F, 0x36, 0x6E, 0x38, 0x63, 0x33, 0x48, 0x56, 0x4C, 0x45, 0x34, 0x53, 0x39, 0x7A, 0x4F, 0x4C, 0x47, 0x59, 0x48, 0x6C, 0x46, 0x4A, 0x49, 0x50, 0x34, 0x44, 0x59, 0x6F, 0x38, 0x72, 0x6F, 0x70, 0x67, 0x73, 0x42, 0x58, 0x52, 0x41, 0x7A, 0x4C, 0x47, 0x6E, 0x52, 0x72, 0x77, 0x31, 0x7A, 0x37, 0x46, 0x51, 0x6A, 0x57, 0x66, 0x64, 0x75, 0x4E, 0x74, 0x69, 0x63, 0x5A, 0x68, 0x55, 0x65, 0x4D, 0x52, 0x72, 0x6D, 0x77, 0x74, 0x44, 0x6D, 0x33, 0x48, 0x49, 0x54, 0x61, 0x38, 0x65, 0x48, 0x65, 0x4C, 0x6E, 0x4F, 0x74, 0x75, 0x53, 0x6F, 0x4F, 0x4A, 0x6E, 0x66, 0x2F, 0x4F, 0x79, 0x22, 0x04, 0x31, 0x7C, 0x38, 0x35 };
        lwj2.put("R77zhWxoj5EXh+mpncjuoA==",lwj2Bytes);
        list.add(lwj2);

        Map<String,byte[]> oyl = new HashMap<String, byte[]>();
        byte[] oylBytes = { 0x0A, 0x06, 0x32, 0x2E, 0x32, 0x31, 0x2E, 0x31, 0x12, 0x13, 0x32, 0x30, 0x31, 0x38, 0x2D, 0x31, 0x30, 0x2D, 0x31, 0x35, 0x20, 0x31, 0x31, 0x3A, 0x35, 0x33, 0x3A, 0x31, 0x36, 0x1A, (byte)0xC2, (byte)0x80, 0x01, 0x57, 0x52, 0x71, 0x6F, 0x53, 0x70, 0x52, 0x57, 0x4E, 0x52, 0x4C, 0x32, 0x2F, 0x2F, 0x74, 0x30, 0x67, 0x6E, 0x47, 0x4A, 0x48, 0x71, 0x45, 0x36, 0x68, 0x70, 0x56, 0x56, 0x6B, 0x75, 0x6F, 0x48, 0x73, 0x41, 0x6F, 0x36, 0x6E, 0x38, 0x63, 0x33, 0x48, 0x56, 0x4C, 0x45, 0x34, 0x53, 0x39, 0x7A, 0x4F, 0x4C, 0x47, 0x59, 0x48, 0x6C, 0x46, 0x4A, 0x49, 0x50, 0x34, 0x44, 0x59, 0x6F, 0x38, 0x72, 0x6F, 0x70, 0x67, 0x73, 0x42, 0x58, 0x52, 0x41, 0x7A, 0x4C, 0x47, 0x4E, 0x4F, 0x62, 0x42, 0x62, 0x77, 0x42, 0x77, 0x33, 0x73, 0x53, 0x30, 0x39, 0x57, 0x36, 0x6D, 0x70, 0x78, 0x48, 0x36, 0x76, 0x62, 0x6B, 0x4F, 0x42, 0x77, 0x55, 0x66, 0x47, 0x4F, 0x78, 0x4D, 0x4D, 0x77, 0x53, 0x69, 0x6F, 0x76, 0x59, 0x79, 0x74, 0x4C, 0x67, 0x35, 0x45, 0x4F, 0x56, 0x70, 0x73, 0x72, 0x4F, 0x7A, 0x52, 0x22, 0x04, 0x31, 0x7C, 0x38, 0x35 };
        oyl.put("FupxsLxaVHf49HgNprkNzg==",oylBytes);
        list.add(oyl);

        while(true) {
            for(int i=0;i<list.size();i++) {
                Map<String,byte[]> m = list.get(i);
                Set<Map.Entry<String, byte[]>> entrySet = m.entrySet();
                Iterator<Map.Entry<String, byte[]>> iterator = entrySet.iterator();
                Map.Entry<String, byte[]> mapEntry = iterator.next();
                try {
                    String reulst = takeOtherCoin(mapEntry.getKey(), mapEntry.getValue());
                    //System.out.println(mapEntry.getKey()+"---"+reulst);
                    LOG.info("收取好友金币"+mapEntry.getKey() + "---" + reulst);
                    if (reulst.contains("不能再捡")) {
                        stopTime = Integer.parseInt(sdf.format(new Date()));
                        return;
                    }
                    Thread.sleep(2000);
                } catch (Exception e) {
                    LOG.error(e);
                }
            }
        }
    }

    public static void main(String[] args) throws Exception{
        if("1".equals(System.getProperty("i"))) {
            Thread t2 = new Thread(() -> takeMyCoin());
            t2.start();
        }

        waterFlowers();
        Thread t1 = new Thread(() -> takeFriendsCoins());
        t1.start();

        while(true) {
            if(Integer.valueOf(sdf.format(new Date())) > stopTime) {
                LOG.info("又是新的一天了");
                waterFlowers();

                if(t1.getState() == Thread.State.TERMINATED){
                    t1 = new Thread(() -> takeFriendsCoins());
                    t1.start();
                }
            }

            Thread.sleep(1000 * 3600);
        }
    }

}
